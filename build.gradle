/*
 * xnatx-nihss-plugin: build.gradle
 * XNAT http://www.xnat.org
 * Copyright (c) 2017, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

buildscript {
    ext {
        // vXnat = "1.7.5"
        vXnat = "1.7.6-SNAPSHOT"
    }
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-release"
            name "XNAT Release Repository"
        }
        maven {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot"
            name "XNAT Snapshot Repository"
        }
    }
    dependencies {
        classpath "org.nrg.xnat.build:xnat-data-builder:${vXnat}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
        classpath "io.franzbecker:gradle-lombok:2.1"
    }
}

group "org.nrg.xnatx"
version "1.0.0-SNAPSHOT"

apply plugin: "io.spring.dependency-management"
apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: "groovy"
apply plugin: "java"
apply plugin: "application"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "jacoco"
apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "xnat-data-builder"

repositories {
    mavenLocal()
    maven {
        url "http://maven.imagej.net/content/groups/public"
        name "ImageJ Maven Repository"
    }
    jcenter()
    mavenCentral()
    maven {
        url "https://nrgxnat.jfrog.io/nrgxnat/libs-release"
        name "XNAT Release Repository"
    }
    maven {
        url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot"
        name "XNAT Snapshot Repository"
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    // Required for post-5.x Gradle and xnat-data-builder 1.7.5 or earlier.
    // annotationProcessor "org.nrg:framework:1.7.5"

    implementation("org.nrg.xnat:web") {
        transitive = false
    }
    implementation("org.nrg.xnat:xnat-data-models") {
        transitive = false
    }
    implementation "org.nrg.xdat:core"

    implementation "org.apache.commons:commons-lang3"
    implementation "org.slf4j:slf4j-api"
    implementation "log4j:log4j"

    compileOnly("stratum:stratum") {
        transitive = false
    }

    testImplementation "junit:junit"
    testImplementation "org.springframework:spring-test"
}

if (hasProperty("rt.17.jar")) {
    // Solution for bootstrap classpath warning and possible issues with compatibility with 1.7 libraries
    // was taken from this post on discuss.gradle.org: http://bit.ly/24xD9j0
    def rt17jar = property "rt.17.jar"
    logger.info "Using ${rt17jar} as the bootstrap class path jar."
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) { task ->
            task.options.fork = true
            task.options.compilerArgs << "-XDignore.symbol.file"
            task.options.bootstrapClasspath = files(rt17jar as String)
        }
    }
} else {
    logger.warn "No value was set for the rt.17.jar build property, using the default bootstrap class path. You should consider setting rt.17.jar to indicate a jar file containing the Java 1.7 run-time library:\n"
    logger.warn "  ./gradlew -Prt.17.jar=rt-1.7.0_45.jar war\n"
}

jar {
    manifest {
        attributes "Application-Name": "CS Data Plugin",
                "Build-Date": new Date(),
                "Implementation-Version": version
    }
}

compileJava {
    options.fork = false
}

configurations {
    compile.extendsFrom(compileAndInclude)
    all*.exclude group: "javax.sql", module: "jdbc-stdext"
    all*.exclude group: "javax.transaction", module: "jta"
}

jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"]
}

jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

task fatJar(type: Jar) {
    zip64 true
    baseName = project.name + "-all"
    from {
        configurations.compileAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java

        pom.withXml {
            def root = asNode()
            root.appendNode("name", "XNAT Workshop 2016 Plugin")
            root.appendNode("url", "https://bitbucket.org/xnatx/xnatx-nihss-plugin")
            root.appendNode("inceptionYear", "2016")

            def scm = root.appendNode("scm")
            scm.appendNode("url", "https://bitbucket.org/xnatx/xnatx-nihss-plugin")
            scm.appendNode("connection", "scm:https://bitbucket.org/xnatx/xnatx-nihss-plugin")
            scm.appendNode("developerConnection", "scm:git@bitbucket.org:xnatx/xnatx-nihss-plugin.git")

            def license = root.appendNode("licenses").appendNode("license")
            license.appendNode("name", "Simplified BSD 2-Clause License")
            license.appendNode("url", "http://xnat.org/about/license.php")
            license.appendNode("distribution", "repo")

            root.appendNode("developers").with {
                def rherrick = appendNode("developer")
                rherrick.appendNode("id", "rherrick")
                rherrick.appendNode("name", "Rick Herrick")
                rherrick.appendNode("email", "jrherrick@wustl.edu")
            }
        }
    }
}

publishing.repositories {
    maven {
        credentials {
            // These properties must be set in the ~/.gradle/gradle.properties file or passed on the Gradle command
            // line in the form -PrepoUsername=foo -PrepoPassword=bar.
            username propertyWithDefault("repoUsername", "username")
            password propertyWithDefault("repoPassword", "password")
        }
        if (project.version.endsWith("-SNAPSHOT")) {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot-local"
        } else {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-release-local"
        }
    }
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
            srcDir "build/xnat-generated/src/main/java"
        }
        resources {
            srcDir "src/main/resources"
            srcDir "build/xnat-generated/src/main/resources"
        }
    }
}

def propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}
